stages:
  - preparation
  - testing
  - build
  - deploy

variables:
  ECR_REPO: 889957192357.dkr.ecr.eu-west-3.amazonaws.com/marmelade-backend
  CONTAINER_TEST_IMAGE: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG
  CONTAINER_PREPROD_IMAGE: $ECR_REPO:$CI_COMMIT_SHORT_SHA
  CONTAINER_RELEASE_IMAGE: $ECR_REPO:$CI_COMMIT_TAG
  CONTAINER_RELEASE_IMAGE_LATEST: $ECR_REPO:latest
  MYSQL_DATABASE: backend
  MYSQL_ROOT_PASSWORD: secret

build_test_image:
  stage: preparation
  image: docker:latest
  except:
    - master
    - tags
  services:
    - docker:dind
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - env DOCKER_BUILDKIT=1 docker build -t $CONTAINER_TEST_IMAGE -t $CI_REGISTRY_IMAGE:latest --target dev .
    - docker push $CONTAINER_TEST_IMAGE
    - docker push $CI_REGISTRY_IMAGE:latest

phpunit_tests:
  stage: testing
  image: $CI_REGISTRY_IMAGE:latest
  except:
    - master
    - tags
  services:
    - mysql:5.7
  script:
    - composer install
    - cp .env.testing .env
    - php artisan migrate
    - vendor/bin/phpunit

phpcpd:
  stage: testing
  image: $CI_REGISTRY_IMAGE:latest
  except:
    - master
    - tags
  script:
    - test -f phpcpd.phar || curl -L https://phar.phpunit.de/phpcpd.phar -o phpcpd.phar
    - php phpcpd.phar app/ --min-lines=50
  cache:
    paths:
      - phpcpd.phar

# Remove lots of errors and warning before enabling this
#codestyle:
#  stage: testing
#  image: lorisleiva/laravel-docker
#  except:
#    - branches
#    - tags
#  allow_failure: true
#  script:
#    - phpcs --extensions=php app

sensiolabs:
  stage: testing
  image: $CI_REGISTRY_IMAGE:latest
  except:
    - master
    - tags
  script:
    - test -d security-checker || git clone https://github.com/sensiolabs/security-checker.git
    - cd security-checker
    - composer install
    - php security-checker security:check ../composer.lock
  cache:
    paths:
      - security-checker/

build_preprod_image:
  stage: build
  image: docker:latest
  only:
    - master
  services:
    - docker:dind
  script:
    - apk add --no-cache curl jq py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region eu-west-3)
    - echo $CONTAINER_PREPROD_IMAGE
    - env DOCKER_BUILDKIT=1 docker build -t $CONTAINER_PREPROD_IMAGE --target prod .
    - docker push $CONTAINER_PREPROD_IMAGE

build_prod_image:
  stage: build
  image: docker:latest
  only:
    - tags
  services:
    - docker:dind
  script:
    - apk add --no-cache curl jq py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region eu-west-3)
    - env DOCKER_BUILDKIT=1 docker build -t $CONTAINER_RELEASE_IMAGE -t $CONTAINER_RELEASE_IMAGE_LATEST --target prod .
    - docker push $CONTAINER_RELEASE_IMAGE
    - docker push $CONTAINER_RELEASE_IMAGE_LATEST

deploy_preprod:
  stage: deploy
  when: manual
  only:
    - master
  image: $CI_REGISTRY_IMAGE:latest
  script:
    - curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/aws-iam-authenticator
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.16.4/bin/linux/amd64/kubectl
    - chmod +x ./kubectl ./aws-iam-authenticator
    - sudo mv ./kubectl /usr/local/bin/kubectl
    - mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
    - mkdir ${HOME}/.kube
    - echo "$KUBE_CONFIG" | base64 --decode > ${HOME}/.kube/config
    - kubectl -n preprod set image deployment/backend-deployment app=$CONTAINER_PREPROD_IMAGE
    - kubectl -n preprod set image cronjob.batch/backend-cron cron=$CONTAINER_PREPROD_IMAGE

deploy_prod:
  stage: deploy
  only:
    - tags
  image: $CI_REGISTRY_IMAGE:latest
  script:
    - curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.16.8/2020-04-16/bin/linux/amd64/aws-iam-authenticator
    - curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.16.4/bin/linux/amd64/kubectl
    - chmod +x ./kubectl ./aws-iam-authenticator
    - sudo mv ./kubectl /usr/local/bin/kubectl
    - mkdir -p $HOME/bin && cp ./aws-iam-authenticator $HOME/bin/aws-iam-authenticator && export PATH=$PATH:$HOME/bin
    - mkdir ${HOME}/.kube
    - echo "$KUBE_CONFIG" | base64 --decode > ${HOME}/.kube/config
    - kubectl -n prod set image deployment/backend-deployment app=$CONTAINER_RELEASE_IMAGE
    - kubectl -n prod set image cronjob.batch/backend-cron cron=$CONTAINER_RELEASE_IMAGE
    - kubectl -n old-prod set image deployment/backend-deployment app=$CONTAINER_RELEASE_IMAGE